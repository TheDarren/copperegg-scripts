#!/usr/bin/perl -w
# Author: Darren Patterson <darren.patterson@stanford.edu
# Copyright: 2014 The Board of Trustees of the Leland Stanford Junior University
#
# License:: Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including without
# limitation the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


use strict;
use JSON;
use LWP;
use Data::Dumper;
use Getopt::Long qw(GetOptions);
use Date::Manip;

my $api = '';

my $USAGE = <<'EOU';
Usage:
  ./ce-downtime -n name -m MIN -s startTime [-t tag -t ...] [-e exclude -e ...] [-v|--verbose] [-q|--quiet] [-h|--help]

  NOTES: 
  -t and -e options can be used multiple times.

  If no -t is provided, the schedule covers all systems.

  Time can be specified in all sorts of nice ways: 
    "27 minutes from now"
    "2029-07-12 5AM"
    "Tuesday 5pm"
    "Fri Jul 18 15:04:35 PDT 2014"
    ... and more

EOU

# options
my $verb;
my $help;
my $name;
my $min;
my $quiet;
my $time;
my @tags;
my @excludes;

GetOptions ( 'v|verbose'    => \$verb,
             'h|help'       => \$help,
             'name|n=s'     => \$name,
             'min|m=n'      => \$min,
             'start|s=s'    => \$time,
             'tag|t=s@'     => \@tags,
             'exclude|e=s@' => \@excludes,
             'quiet|q'      => \$quiet,
           );

if ($help) {
  print $USAGE;
  exit;
}

if (!defined($name) || !defined($min) || !defined($time)) {
  print STDERR $USAGE;
  exit 2;
}
chomp $name;
chomp $min;
chomp $time;

my $browser = LWP::UserAgent->new;

my $startTime = ParseDate($time) || die "Could not parse time: $!";

my $json = '{"name":"'.$name.'", "start_time":"'.UnixDate($startTime,"%Y-%m-%dT%T%z").'", "duration":'.$min.', "state":"enabled"';

if (defined($excludes[0])) {
  $json .= ', "match_exclude":{"tag":[';
  my $first = 0;
  foreach my $e (@excludes) {
    $json .= ", " if ( $first == 1 );
    $json .= '"'.$e.'"';
    $first = 1;
  }
  $json .= ']}';
}

if (defined($tags[0])) {
  $json .= ', "match":{"tag":[';
  my $first = 0;
  foreach my $t (@tags) {
    $json .= ", " if ( $first == 1 );
    $json .= '"'.$t.'"';
    $first = 1;
  }
  $json .= ']}';
}

$json .= '}';

print $json."\n" if $verb;

my $req = HTTP::Request->new( 'POST', 'https://'.$api.':U@api.copperegg.com/v2/alerts/schedules.json' );
$req->header( 'Content-Type' => 'application/json' );
$req->content( $json );
my $response = $browser->request( $req );

if ($response->is_success) {
  print "Success: schedule $name added for ".UnixDate($startTime,"%Y-%m-%dT%T%z")." for duration $min\n" unless $quiet;
  print Dumper $response->content if $verb;
}
else {
  die "Error: ".$response->status_line."\n";
}
